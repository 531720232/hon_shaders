// (C)2008 S2 Games
// mesh_color_unit.psh
// 
// Default unit pixel shader
//=============================================================================

//=============================================================================
// Headers
//=============================================================================
#include "../common/common.h"
#include "../common/fog.h"
#if (SHADOWS == 1)
#include "shadowed.h"
#endif

//=============================================================================
// Global variables
//=============================================================================
float3		vSunPositionWorld;
float3		vCameraRight;
float3x3	mWorldRotate;

float3		vAmbient;
float3		vSunColor;

float2		vSpec;

#if (NUM_POINT_LIGHTS > 0)
float3		vPointLightPositionOffset[NUM_POINT_LIGHTS];
float3		vPointLightColor[NUM_POINT_LIGHTS];
float2		vPointLightFalloff[NUM_POINT_LIGHTS];
#endif

//=============================================================================
// Vertex shader output structure
//=============================================================================
struct VS_OUTPUT
{
	float4 Color0 : COLOR0;
	float2 Texcoord0 : TEXCOORDX;
		#include "../common/inc_texcoord.h"
	float3 PositionOffset : TEXCOORDX;
		#include "../common/inc_texcoord.h"
#if (LIGHTING_QUALITY == 0)
	float3 Normal : TEXCOORDX;
		#include "../common/inc_texcoord.h"
	float3 Tangent : TEXCOORDX;
		#include "../common/inc_texcoord.h"
	float3 Binormal : TEXCOORDX;
		#include "../common/inc_texcoord.h"
#elif (LIGHTING_QUALITY == 1)
	float3 HalfAngle : TEXCOORDX;
		#include "../common/inc_texcoord.h"
	#ifdef GROUND_AMBIENT
	float4 SunLight : TEXCOORDX;
		#include "../common/inc_texcoord.h"
	#else
	float3 SunLight : TEXCOORDX;
		#include "../common/inc_texcoord.h"
	#endif
#elif (LIGHTING_QUALITY == 2)
	#ifdef GROUND_AMBIENT
	float4 DiffLight : TEXCOORDX;
		#include "../common/inc_texcoord.h"
	#else
	float3 DiffLight : TEXCOORDX;
		#include "../common/inc_texcoord.h"
	#endif
#endif
#if (SHADOWS == 1)
	float4 TexcoordLight : TEXCOORDX; // Texcoord in light texture space
		#include "../common/inc_texcoord.h"
#endif
#ifdef CLOUDS
	float2 TexcoordClouds : TEXCOORDX;
		#include "../common/inc_texcoord.h"
#endif
#if ((FOG_QUALITY == 1 && FOG_TYPE != 0) || (FALLOFF_QUALITY == 1 && FOG_TYPE != 0) || FOG_OF_WAR == 1)
	float4 Last : TEXCOORDX;
		#include "../common/inc_texcoord.h"
#endif
};

//=============================================================================
// Pixel shader input structure
//=============================================================================
struct PS_OUTPUT
{
	float4 Color : COLOR;
};

sampler diffuse;

#ifndef RXGB_NORMALMAP
sampler normalmap;
#else
sampler normalmap_0;
sampler normalmap_1;
#endif

#ifdef CLOUDS
sampler clouds;
#endif

#if (FOG_OF_WAR == 1)
sampler fogofwar;
#endif

//=============================================================================
// Pixel Shader
//=============================================================================
PS_OUTPUT PS( VS_OUTPUT In )
{
	PS_OUTPUT Out;

	float3 vCamDirection = -normalize(In.PositionOffset);

#if (FOG_TYPE != 0 || SHADOWS == 1)
	#if (FALLOFF_QUALITY == 1)
	float fCamDistance = In.Last.z;
	#else
	float fCamDistance = length(In.PositionOffset);
	#endif
#endif
	
	//
	// Lighting
	//	

#ifndef RXGB_NORMALMAP
	float4 cNormalmapColor = tex2D(normalmap, In.Texcoord0);
#else
	float4 cNormalmapColor;
	cNormalmapColor.rgb = tex2D(normalmap_0, In.Texcoord0).agb;
	cNormalmapColor.a = tex2D(normalmap_1, In.Texcoord0).g;
#endif

float3 vTexNormal = float3(cNormalmapColor.rgb * 2.0f - 1.0f);

#if (LIGHTING_QUALITY != 0)
	float3 vNormal = vTexNormal;
#else
	float3x3 mRotation = float3x3(In.Tangent, In.Binormal, In.Normal);
	float3 vNormal = normalize(mul(vTexNormal, mRotation));
#endif
	
	//
	// Fog
	//

#if (FOG_TYPE != 0) // FOG_NONE
	#if (FOG_QUALITY == 1)
	float fFog = In.Last.w;
	#else
	float fFog = FogD(fCamDistance);
	#endif
#else
	float fFog = 0.0f;
#endif
	
	float4 cDiffuseColor = tex2D(diffuse, float2(clamp(dot(vCamDirection, vNormal), 0.01f, 0.99f), 0.5f));

	cDiffuseColor *= In.Color0;

	//
	// Final
	//
	
	float4 vFinalColor = cDiffuseColor;
		
#if (FOG_OF_WAR == 1)
	vFinalColor *= tex2D(fogofwar, In.Last.xy).a;
#endif

	Out.Color.rgb = lerp(vFinalColor, vFogColor, fFog);
	Out.Color.a = vFinalColor.a;

	return Out;
}
