// (C)2008 S2 Games
// terrain_color.psh
// 
// ...
//=============================================================================

//=============================================================================
// Headers
//=============================================================================
#include "../common/common.h"
#include "../common/fog.h"
#if (SHADOWS == 1)
#include "shadowed.h"
#endif

//=============================================================================
// Global variables
//=============================================================================
float3		vSunPositionWorld;

float3		vAmbient;
float3		vSunColor;

float2		vSpec;

#if (NUM_POINT_LIGHTS > 0)
float3		vPointLightPositionOffset[NUM_POINT_LIGHTS];
float3		vPointLightColor[NUM_POINT_LIGHTS];
float2		vPointLightFalloff[NUM_POINT_LIGHTS];
#endif

float		fSpecularLevel;
float4		vDiffuseColor;
float3		vAlphaParams;
float		fWatermapSize;

float3 		vFakeSpecDir;
float3 		vFakeSpecColor;
//=============================================================================
// Vertex shader output structure
//=============================================================================
struct VS_OUTPUT
{
	float ReflectionPow : COLOR0;
	float4 Texcoord0 : TEXCOORDX;
		#include "../common/inc_texcoord.h"
	float2 Texcoord1 : TEXCOORDX;
		#include "../common/inc_texcoord.h"
	float4 PositionScreen : TEXCOORDX;
		#include "../common/inc_texcoord.h"
#if (LIGHTING_QUALITY == 0 || FALLOFF_QUALITY == 0)
	float3 PositionOffset : TEXCOORDX;
		#include "../common/inc_texcoord.h"
#endif
#if (LIGHTING_QUALITY == 0)
	float3 Normal : TEXCOORDX;
		#include "../common/inc_texcoord.h"
	float3 Tangent : TEXCOORDX;
		#include "../common/inc_texcoord.h"
	float3 Binormal : TEXCOORDX;
		#include "../common/inc_texcoord.h"
#elif (LIGHTING_QUALITY == 1)
	float3 HalfAngle : TEXCOORDX;
		#include "../common/inc_texcoord.h"
	float3 SunLight : TEXCOORDX;
		#include "../common/inc_texcoord.h"
	float3 Reflect : TEXCOORDX;
		#include "../common/inc_texcoord.h"
#elif (LIGHTING_QUALITY == 2)
	float3 DiffLight : TEXCOORDX;
		#include "../common/inc_texcoord.h"
#endif
#if (SHADOWS == 1)
	float4 TexcoordLight : TEXCOORDX; // Texcoord in light texture space
		#include "../common/inc_texcoord.h"
#endif
#ifdef CLOUDS
	float2 TexcoordClouds : TEXCOORDX;
		#include "../common/inc_texcoord.h"
#endif
#if ((FOG_QUALITY == 1 && FOG_TYPE != 0) || (FALLOFF_QUALITY == 1 && (FOG_TYPE != 0 || SHADOWS == 1)) || FOG_OF_WAR == 1)
	float4 Last : TEXCOORDX;
		#include "../common/inc_texcoord.h"
#endif
};

//=============================================================================
// Pixel shader input structure
//=============================================================================
struct PS_OUTPUT
{
	float4 Color : COLOR;
};

sampler waternormalmap1;
sampler waternormalmap2;
sampler	waterflowmap;
sampler waterdiffuse;

samplerCUBE cube;
sampler reflection;

#if (WATER_QUALITY != 2)	
sampler	waterdistortion;
#endif

#ifdef CLOUDS
sampler clouds;
#endif

#if (FOG_OF_WAR == 1)
sampler fogofwar;
#endif

//=============================================================================
// Pixel Shader
//=============================================================================
PS_OUTPUT PS( VS_OUTPUT In )
{
	PS_OUTPUT Out;
	
#if (LIGHTING_QUALITY == 0)
	float3 vCamDirection = -normalize(In.PositionOffset);
#endif

#if (FOG_TYPE != 0 || SHADOWS == 1)
	#if (FALLOFF_QUALITY == 1)
		float fCamDistance = In.Last.z;
	#else
		float fCamDistance = length(In.PositionOffset);
	#endif
#endif
	
	//
	// Diffuse Texture
	//


	float3 cDiffuseColor = tex2D(waterdiffuse, In.Texcoord0.xy).rgb;
	cDiffuseColor.rgb *= vDiffuseColor.rgb;
	
	//
	// Shadowing
	//
	
#if (SHADOWS == 1)
	float fShadow = ShadowedD(In.TexcoordLight, fCamDistance);
#else // SHADOWS == 0
	float fShadow = 1.0f;
#endif
	
	//
	// Flowmap
	//
	
	float fFlowmap = tex2D(waterflowmap, (In.Texcoord1.xy + 0.5f) * fWatermapSize).b;

	//
	// Lighting
	//
	
#if (LIGHTING != 0)

	#if (WATER_QUALITY != 2)
		float3 cNormalmapColor1 = tex2D(waternormalmap1, In.Texcoord0.xy).rgb;
		float3 cNormalmapColor2 = tex2D(waternormalmap2, In.Texcoord0.zw).rgb;
		
		float3 vTexNormal1 = float3(cNormalmapColor1.rgb * 2.0f - 1.0f);
		float3 vTexNormal2 = float3(cNormalmapColor2.rgb * 2.0f - 1.0f);
		
		float3 vTexNormal = normalize(vTexNormal1 + vTexNormal2);
	#else
		float3 vTexNormal = tex2D(waternormalmap1,  In.Texcoord0.xy).rgb  * 2.0 - 1.0;
	#endif
	
	#if (LIGHTING_QUALITY == 1)
		float3 vNormal = vTexNormal;
	#elif (LIGHTING_QUALITY == 0)
		float3x3 mRotation = float3x3(In.Tangent, In.Binormal, In.Normal);
		float3 vNormal = normalize(mul(vTexNormal, mRotation));
	#endif
		
	float3 vDiffuse = vAmbient;
	float3 vSpecular = float3(0.0f, 0.0f, 0.0f);
	float fSpecular = vSpec.x;
	
	#if (LIGHTING_QUALITY == 0)
			//Angle
		float fRefAngle = 1.0f - saturate((dot(vCamDirection, In.Normal) * 5.0f - 4.5f)) ;
	#elif (LIGHTING_QUALITY == 1)
		float fRefAngle = 1.0f - saturate(dot(normalize(In.HalfAngle) * 0.4f, vNormal) * 2.0f);
	#elif (LIGHTING_QUALITY == 2)
		float fRefAngle = 0.666f;
	#endif
		
	#if (LIGHTING_QUALITY == 2)
		#if (WATER_QUALITY == 2)
			vDiffuse = (vDiffuse + In.DiffLight.xyz) * fShadow;
		#else
			vDiffuse = (vDiffuse + In.DiffLight.xyz * saturate(dot(vTexNormal.xyz, float3(-3.0, -3.0, 1.0))) + vSunColor) * fShadow;
			vSpecular += pow(saturate(dot(vTexNormal.xyz, float3(0.0, 0.0, 1.0))), vSpec.y) * fSpecular * fShadow;
		#endif
	
	#else // 0 or 1
		// Sun
		#if (LIGHTING_QUALITY == 1)
			float3 vLight = normalize(In.SunLight);
			float3 vHalfAngle = normalize(In.HalfAngle);

		#else
			float3 vLight = vSunPositionWorld.xyz;		
			float3 vHalfAngle = normalize(vLight + vCamDirection);

		#endif
		
		float2 vLit; // x = diffuse, y = specular
		
		vLit.x = dot(vNormal, vLight);
		vLit.y = saturate(pow(dot(vNormal, vHalfAngle), vSpec.y) * fSpecular * vLit.x);

		vLit *= fShadow;

		#ifdef CLOUDS
			float4 cCloudColor = tex2D(clouds, In.TexcoordClouds);
		
			vDiffuse += vSunColor * vLit.x * cCloudColor;
			vSpecular += vSunColor * vLit.y * cCloudColor;
		#else
			vDiffuse += vSunColor * vLit.x;
			vSpecular += vSunColor * vLit.y;
		#endif
	
		#if (NUM_POINT_LIGHTS > 0 && LIGHTING_QUALITY == 0)
			// Point Lights
			[unroll(NUM_POINT_LIGHTS)] for (int i = 0; i < NUM_POINT_LIGHTS; ++i)
			{
				float3 vDeltaPosition = vPointLightPositionOffset[i] - In.PositionOffset;
				float fDistance = length(vDeltaPosition);
			
				float3 vLight = normalize(vDeltaPosition);
				float3 vHalfAngle = normalize(vLight + vCamDirection);

				float fAttenuation = 1.0f - saturate(fDistance * vPointLightFalloff[i].x + vPointLightFalloff[i].y);
				
				float2 vLit; // x = diffuse, y = specular
				
				vLit.x = saturate(dot(vNormal, vLight));
				vLit.y = pow(saturate(dot(vNormal, vHalfAngle)), vSpec.y) * fSpecular;
				
				vLit *= fAttenuation;
				
				vDiffuse += vPointLightColor[i] * vLit.x;
				vSpecular += vPointLightColor[i] * vLit.y;
			}
		#endif // POINT_LIGHTS

		#if defined(FAKE_SPEC) && LIGHTING_QUALITY == 0
	//
	//	fake specular
	//
	float3 vHalfAngleFake = normalize(vFakeSpecDir + vCamDirection);
	float fLitSpecFake = pow(saturate(dot(vNormal, vHalfAngleFake)), vSpec.y) * fSpecular;
	vSpecular += fLitSpecFake * vFakeSpecColor;
		#endif

	#endif // LIGHTING_QUALITY
	
	//
	// Fog
	//

#if (FOG_TYPE != 0) // FOG_NONE
	#if (FOG_QUALITY == 1)
		float fFog = In.Last.w;
	#else
		float fFog = FogD(fCamDistance);
	#endif
#else
	float fFog = 0.0f;
#endif

	//
	// Environment
	//

#if (WATER_QUALITY == 0)
#if (LIGHTING_QUALITY == 0)
	float3 cEnviroColor = texCUBE(cube, reflect(In.PositionOffset, vNormal));
#elif (LIGHTING_QUALITY == 1)
	float3 cEnviroColor = texCUBE(cube, In.Reflect.xyz).rgb;
#endif
#else
	float3 cEnviroColor = 0;
#endif

	//
	// Reflection
	//
		
	float2 vSceneTexcoord = In.PositionScreen.xy / In.PositionScreen.w;

	#if (WATER_QUALITY == 0)	
		vSceneTexcoord.xy += vTexNormal.xy * 0.015f;
	#elif (LIGHTING_QUALITY != 2)
		vSceneTexcoord.xy += vTexNormal.xy * 0.03f;
	#endif

#ifdef REFLECTIONS
	float4 cReflectionColor = tex2D(reflection, vSceneTexcoord);
	cReflectionColor *= In.ReflectionPow * vAlphaParams.y * fFlowmap * fRefAngle;
	cReflectionColor.a = 1.0f - cReflectionColor.a * In.ReflectionPow * fRefAngle;
#endif
	
	//
	// Final
	//
	
#if (LIGHTING_QUALITY != 2 && WATER_QUALITY == 0)
	float3 vFinalColor = lerp(cDiffuseColor.rgb * vDiffuse, cEnviroColor, vAlphaParams.z);
#else
	float3 vFinalColor = cDiffuseColor.rgb * vDiffuse * 0.5f;
#endif

#if (WATER_QUALITY == 0)
	float fAlpha = vAlphaParams.x * fFlowmap;
#else
	float fAlpha = vAlphaParams.x * fFlowmap * 2;
#endif
	
#ifdef REFLECTIONS
	float fFinalAlpha = 1.0f - (1.0f - fAlpha) * cReflectionColor.a;
#else
	float fFinalAlpha = fAlpha;
#endif
	
#if (WATER_QUALITY == 0)	
	float3 cWaterDistortionColor = tex2D(waterdistortion, vSceneTexcoord.xy).rgb;

	#ifdef REFLECTIONS
		vFinalColor *= fAlpha * cReflectionColor.a;
	#else
		vFinalColor *= fAlpha;
	#endif
	
	vFinalColor = lerp(vFinalColor + cWaterDistortionColor.rgb * fFlowmap, vFinalColor, fFinalAlpha);
	
	#ifdef REFLECTIONS
		vFinalColor += cReflectionColor.rgb;
	#endif
	
	fFinalAlpha = fFlowmap;
	
#else
	#ifdef REFLECTIONS
		vFinalColor = lerp(cReflectionColor.rgb, vFinalColor, cReflectionColor.a);
	#else
		vFinalColor *= fAlpha;
	#endif
#endif

	vFinalColor += vSpecular * fSpecularLevel * fFlowmap;
	
#if (FOG_OF_WAR == 1)
	vFinalColor *= tex2D(fogofwar, In.Last.xy).a;
#endif

#if (WATER_QUALITY != 0 || LIGHTING_QUALITY >= 1)
	Out.Color.rgb = vFinalColor;
#else
	Out.Color.rgb = lerp(vFinalColor, vFogColor, fFog);
#endif

	Out.Color.a = fFinalAlpha;
#else // LIGHTING == 0
	Out.Color = float4(0,0,0,1);
#endif

	return Out;
}
