// (C)2008 S2 Games
// mesh_color_unit_spec.psh
// 
// ...
//=============================================================================

//=============================================================================
// Headers
//=============================================================================
#include "../common/common.h"

//=============================================================================
// Global variables
//=============================================================================
float3		vSunPositionWorld;

float3		vAmbient;
float3		vSunColor;

float3		vTeamColor;
float2		vSpec;

//=============================================================================
// Vertex shader output structure
//=============================================================================
struct VS_OUTPUT
{
	float4 Color0 : COLOR0;
	float2 Texcoord0 : TEXCOORDX;
		#include "../common/inc_texcoord.h"
	float3 HalfAngle : TEXCOORDX;
		#include "../common/inc_texcoord.h"
	float3 SunLight : TEXCOORDX;
		#include "../common/inc_texcoord.h"
};

//=============================================================================
// Pixel shader input structure
//=============================================================================
struct PS_OUTPUT
{
	float4 Color : COLOR;
};

sampler diffuse;

#ifndef RXGB_NORMALMAP
sampler normalmap;
#else
sampler normalmap_0;
#endif

sampler specular;
sampler team;


//=============================================================================
// Pixel Shader
//=============================================================================
PS_OUTPUT PS( VS_OUTPUT In )
{
	PS_OUTPUT Out;
	
	float4 cDiffuseColor = tex2D(diffuse, In.Texcoord0);


	float fTeamMask = tex2D(team, In.Texcoord0).a;

	cDiffuseColor.rgb *= lerp(In.Color0.rgb, float3(1.0f, 1.0f, 1.0f), fTeamMask);
	cDiffuseColor.a *= In.Color0.a;
	
	cDiffuseColor.rgb *= lerp(float3(1.0f, 1.0f, 1.0f), vTeamColor, fTeamMask);
		
	//
	// Lighting
	//	

	#ifndef RXGB_NORMALMAP
	float3 cNormalmapColor = tex2D(normalmap, In.Texcoord0).rgb;
	#else
	float3 cNormalmapColor = tex2D(normalmap_0, In.Texcoord0).agb;
	#endif
	
	float3 vTexNormal = float3(cNormalmapColor.rgb * 2.0f - 1.0f);
	
	float3 vDiffuse = vAmbient;
	float3 vSpecular = float3(0.0f, 0.0f, 0.0f);
	float fSpecular = vSpec.x;
	
	float3 vNormal = vTexNormal;
	
	// Sun
	
	float3 vLight = normalize(In.SunLight.xyz);
	float3 vHalfAngle = normalize(In.HalfAngle);
			
	float fSelfOcclude = saturate(vLight.z * 5.0f);
			
	float2 vLit; // x = diffuse, y = specular
		
	vLit.x = smoothstep(0.0f, 1.0f, dot(vNormal, vLight) * 1.3f);
	vLit.y = pow(saturate(dot(vNormal, vHalfAngle)), vSpec.y) * fSpecular;

	vLit *= fSelfOcclude;

	vDiffuse += vSunColor * vLit.x;
	vSpecular += vSunColor * vLit.y;
		
	//
	// Specular color
	//
		
	vSpecular *= tex2D(specular, In.Texcoord0).rgb;

	//
	// Final
	//
	
	float3 vFinalColor = cDiffuseColor.rgb * vDiffuse + vSpecular;

	Out.Color.rgb = vFinalColor;
	Out.Color.a = cDiffuseColor.a;

	return Out;
}
