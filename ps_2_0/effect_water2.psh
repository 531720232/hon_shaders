// (C)2014 S2 Games
// effect_water.psh
// 
// Particle water shader
//=============================================================================

//=============================================================================
// Headers
//=============================================================================
#include "../common/common.h"

//=============================================================================
// Global variables
//=============================================================================
float3		vReflectColor;

float2		vSpec;
float			fSpecularLevel;

float 		fNormalScale;

float2 		vScene;

//=============================================================================
// Vertex shader output structure
//=============================================================================
struct VS_OUTPUT
{
	float4 Position : POSITION;
	float4 Color0 : COLOR0;
	float4 PositionScreen : TEXCOORDX;
		#include "../common/inc_texcoord.h"
	float4 Texcoord0 : TEXCOORDX;
		#include "../common/inc_texcoord.h"
	float4 Texcoord1 : TEXCOORDX;
		#include "../common/inc_texcoord.h"
	float3 PositionOffset : TEXCOORDX;
		#include "../common/inc_texcoord.h"
#if (LIGHTING_QUALITY == 0 || LIGHTING_QUALITY == 1)
	float3 Normal : TEXCOORDX;
		#include "../common/inc_texcoord.h"
	float3 Tangent : TEXCOORDX;
		#include "../common/inc_texcoord.h"
	float3 Binormal : TEXCOORDX;
		#include "../common/inc_texcoord.h"
#elif (LIGHTING_QUALITY == 2)
	float3 Reflect : TEXCOORDX;
		#include "../common/inc_texcoord.h"
#endif
};

//=============================================================================
// Pixel shader input structure
//=============================================================================
struct PS_OUTPUT
{
	float4 Color : COLOR;
};

samplerCUBE cube;

sampler diffuse;

sampler reflection;

sampler scene;

#ifndef RXGB_NORMALMAP
	sampler normalmap;
#else
	sampler normalmap_0;
#endif

//=============================================================================
// Pixel Shader
//=============================================================================
PS_OUTPUT PS( VS_OUTPUT In )
{
	PS_OUTPUT Out;
		
	//
	// Lighting
	//

	float4 cDiffuseColor = tex2D(diffuse, In.Texcoord0.xy);
	
	#ifndef RXGB_NORMALMAP
		float3 cNormalmapColor = tex2D(normalmap, In.Texcoord0.xy).agb;
		float3 cNormalmapColor2 = tex2D(normalmap, In.Texcoord1).agb;
	#else
		float3 cNormalmapColor = tex2D(normalmap_0, In.Texcoord0.xy).agb;
		float3 cNormalmapColor2 = tex2D(normalmap_0, In.Texcoord1).agb;
	#endif
	cNormalmapColor = cNormalmapColor * 2.0f - 1.0f;
	cNormalmapColor2 = cNormalmapColor2 * 2.0f - 1.0f;
	float3 vTexNormal = normalize(cNormalmapColor + cNormalmapColor2);
	
	#if (LIGHTING_QUALITY == 0 || LIGHTING_QUALITY == 1)
		//
		// Reflection
		//
		float3 vCamDirection = -normalize(In.PositionOffset);
		float3x3 mRotation = float3x3(In.Tangent, In.Binormal, In.Normal);
		float3 vNormal = normalize(lerp(In.Normal, mul(vTexNormal, mRotation), fNormalScale));
		float3 vHalfAngle = normalize(vNormal + vCamDirection);
		float3 vSpecular = pow(saturate(dot(vNormal, vHalfAngle)), vSpec.y) * fSpecularLevel;
		float3 cReflectColor = texCUBE(cube, reflect(In.PositionOffset, vNormal)) * float4(vReflectColor, 1.0f);
	
		//
		// Refraction
		//
		float2 vSceneTexcoord = In.PositionScreen.xy / In.PositionScreen.w;
		vSceneTexcoord += vTexNormal.xy * In.Texcoord0.w;
		
		float3 cRefractionColor = tex2D(scene, vSceneTexcoord).rgb;
	#else
		// Hacks and magic numbers to make it look good on low :]...
		float3 vSpecular = pow(saturate(dot(vTexNormal, float3(0, .55, 0.95f))), vSpec.y * .05) * fSpecularLevel * 0.75f;
		cDiffuseColor *= 2.0f;
		float3 cReflectColor = texCUBE(cube, vTexNormal) * saturate(float4(vReflectColor, 1.0f) * 4.0f);
	#endif
	
	
#if (LIGHTING_QUALITY == 0 || LIGHTING_QUALITY == 1)
	Out.Color.rgb = cRefractionColor + cReflectColor.rgb + cDiffuseColor.rgb * In.Color0.rgb + vSpecular;
	Out.Color.a = In.Color0.a * tex2D(diffuse, In.Texcoord1.zw).a;
#else
	Out.Color.rgb = cReflectColor.rgb + cDiffuseColor.rgb * In.Color0.rgb + vSpecular;
	Out.Color.a = In.Color0.a * dot(Out.Color.rgb, 0.334f) * tex2D(diffuse, In.Texcoord1.zw).a;
#endif


	return Out;
}